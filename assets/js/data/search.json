[ { "title": "You need Xcode 12.5", "url": "/posts/you-need-xcode12-5/", "categories": "Xcode", "tags": "Kotlin Multiplatform", "date": "2022-12-17 17:18:23 +0000", "snippet": "Ever-since JetBrains announced that kotlin multi-platform is in beta I wanted personally explore the multi-platform thing. They have really awesome get started guide, and incase you happen to have ...", "content": "Ever-since JetBrains announced that kotlin multi-platform is in beta I wanted personally explore the multi-platform thing. They have really awesome get started guide, and incase you happen to have latest MacBook laptop then everything would play out smoothly.But incase you’re like me, trying to get max out of a 10 year old personal MacBook pro, then you’re in for a disappointment. Environment analysis tool kdoctor won’t work for you, it’s not a blocker, you can always go ahead and verify the Environment manually and if your a mobile developer then this Environment are already set in your laptop. The most biggest drawback is that you need, whenever you try to run the iOS code either in Android studio or via Xcode the build would specifically a task called compilekotliniosx64 would fail, and the error message would be as follows Compilation failed due to unsupported Xcode version, min required is 12.5 And unfortunately if mac OS is below 11.0(Big Sur), you will no longer able to install Xcode 12.5, hence unable to run your iOS app, thus you can try your Multi-platform app for Desktop and Android OS alone.Small caveat:All though you can try your luck by downgrading the kotlin Multi-platform plugin version, kotlin compiler version, AS version along with older Xcode version to get it working, but I personally don’t think the investment is worth it!.Reference doc:https://github.com/JetBrains/kotlin/blob/master/kotlin-native/RELEASE_NOTES.md under Compatibility and features you will see ** macOS it also requires Xcode 12.5 or newer to be installed.**" }, { "title": "Theme attributes in android", "url": "/posts/theme-attributes/", "categories": "Android", "tags": "Android", "date": "2021-06-01 17:18:23 +0000", "snippet": "IntroductionLately i have been facing a weird issue with respect changing themes in android as far i knew, call setTheme() before any view creation preferably in the onCreate(savedInstanceState: Bu...", "content": "IntroductionLately i have been facing a weird issue with respect changing themes in android as far i knew, call setTheme() before any view creation preferably in the onCreate(savedInstanceState: Bundle) method of an activity.Everything should work as expected, there are some stackoverflow posts suggesting to call before super call in onCreate method, i seem to try everything but none seems to work.There are also suggestions, incase your theme overrides only few attributes then theme.appleStyle() API, but still API remained un-fruitful.SolutionHowever i stumbled on the blog post by Nick Butcher.After that only i realised that i had been referencing the styles directly in the xml, instead of accessing attributes.That is&lt;TextView ... android:style=\"@style/CaptionText.Strong\" /&gt;instead of the above i should have been doing &lt;TextView ... android:style=\"?CaptionText.Strong\" /&gt; In the latter i am trying to access the attributes from currently setTheme(...), which is actually the recommended approach as it makes adopting to new themes much easier. Which means tomorrow if you have dark theme with some minor change in CaptionText.Strong style, it would easily be reflected once you change the theme." }, { "title": "In list of X items accessibility issue in recycler view", "url": "/posts/in-list-of-x-items/", "categories": "Android, Accessibility", "tags": "Android, Accessibility", "date": "2020-11-25 17:18:23 +0000", "snippet": "If you have enabled accessibility for your application, then you might have noticed first time you navigate to recycler view, your talk back might announce the contents of the recycler row along wi...", "content": "If you have enabled accessibility for your application, then you might have noticed first time you navigate to recycler view, your talk back might announce the contents of the recycler row along with the additional info of in the list of x items.If you are like me ever wondering on how we can get rid of it, there is a small hack that you can apply in your LayoutManager you need to override a method that is responsible getRowCountForAccessibility and return 0.PS: not that proud of the solution but “it works”Reference:RecyclerView.java" }, { "title": "Weird File-provider error in android", "url": "/posts/weird-FileProvider-error/", "categories": "Android", "tags": "Android", "date": "2020-04-26 17:18:23 +0000", "snippet": "If we look at the be behaviour changes in android-7 Nougat. You will find file:// URI sharing outside the app is prohibited and may result in FileUriExposedException.This is when FileProvider subcl...", "content": "If we look at the be behaviour changes in android-7 Nougat. You will find file:// URI sharing outside the app is prohibited and may result in FileUriExposedException.This is when FileProvider subclass of content provider comes to the rescue, which has a method getUriForFile() which returns URI that can be shared outside the app. You follow the standard steps mentioned in android docs and implement the in your app. So far everything looks fine.And then when your sharing the URI, if you have used ShareCompat like me, you add URI in only one of the two methods addStream() or setStream() with Intent.FLAG_GRANT_READ_URI_PERMISSION flag applied, and then call createChooserIntent()and start activity which brings up the standard Android activity chooser.However even though you have done everything right, you see a strange log in the logcat. java.lang.SecurityException: Permission Denial: reading androidx.core.content.FileProvider uri ..At this point you would be tempted to export the file-provider at this point, or run a for loop granting all packages the permission using context.grantUriPermission() as below code snippet, which again not a great solution.List&lt;ResolveInfo&gt; resInfoList = context.getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);for (ResolveInfo resolveInfo : resInfoList) { String packageName = resolveInfo.activityInfo.packageName; context.grantUriPermission(packageName, uri, Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_READ_URI_PERMISSION);} After lot of RnD i found the answer to the above problem in hidden documentation of FLAG_GRANT_READ_URI_PERMISSION, which states the permission grants read operations on the URI in the Intent’s data and any URIs specified in its ClipData.If you have observed ShareCompat does not expose a direct API to set the URI in data or ClipData, but however you can use getIntent() method of ShareCompat and then set ClipData accordingly. as shown in the below code snippet.val sendIntent = ShareCompat.IntentBuilder.from(requireActivity()) .setType(requireContext().contentResolver.getType(uri)) .setChooserTitle(title) .setSubject(subject) .setStream(uri) .intent sendIntent.apply { clipData = ClipData.newRawUri(\"transactions\", uri) addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION) } And then share intent using Intent.createChooser()" }, { "title": "Intended vs Intending in Espresso.", "url": "/posts/intended-vs-intending/", "categories": "Android, espresso", "tags": "Android, espresso", "date": "2019-10-13 17:18:23 +0000", "snippet": "Test your intents using intended, intending when to use what.You might be already aware of Espresso-Intents which is an extension of Espresso used for testing Intents.The espresso intents basically...", "content": "Test your intents using intended, intending when to use what.You might be already aware of Espresso-Intents which is an extension of Espresso used for testing Intents.The espresso intents basically offers two methods for intent validation. Note: If your not using IntentsTestRule but using ActivityTestRule or ActivityScenario, Please make sure you call Intents.init() and Intents.release() before and after testing the intents.1.Intended():This method is used to verify that the given intent is already seen, which means you cannot use it to test an intent that is going to launch, reason being verification does not have to occur in the same order as the intents were sent(If you have to then try using espresso idling resource).2.Intending():The main use case of using intending, is when you start activity for result. If you have ever used mockito framework, it is similar to when that is once you start activity for result then respond with this result.One of the best thing is it can be used to verify external activities like contact picker or camera etc. Intending can be used to verify the launching intent also.More reading:Espresso-Intents" }, { "title": "Hidden costs of using @JvmStatic", "url": "/posts/hidden-costs-of-jvm-static/", "categories": "Kotlin", "tags": "Kotlin", "date": "2019-07-01 17:18:23 +0000", "snippet": "Underling hidden costs of using JvmStatic in kotlin.Consider we have a class A in kotlin, and we use static factory pattern to getInstance of class A.class A{ companion object{ @JvmStatic ...", "content": "Underling hidden costs of using JvmStatic in kotlin.Consider we have a class A in kotlin, and we use static factory pattern to getInstance of class A.class A{ companion object{ @JvmStatic fun getInstance():A = A() }}Now the only reason we @JvmStatic is when we have inter-op from java, where an instance of class A is called from java.Let’s look into underlying java code thats generated when we use @JvmStatic for class Apublic final class A { public static final A.Companion Companion = new A.Companion((DefaultConstructorMarker)null); @JvmStatic @NotNull public static final A getInstance() { return Companion.getInstance(); } @Metadata( mv = {1, 1, 15}, bv = {1, 0, 3}, k = 1, d1 = {\"\\u0000\\u0012\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0002\\b\\u0002\\n\\u0002\\u0018\\u0002\\n\\u0000\\b\\u0086\\u0003\\u0018\\u00002\\u00020\\u0001B\\u0007\\b\\u0002¢\\u0006\\u0002\\u0010\\u0002J\\b\\u0010\\u0003\\u001a\\u00020\\u0004H\\u0007¨\\u0006\\u0005\"}, d2 = {\"Lproblems/Arrays/A$Companion;\", \"\", \"()V\", \"getInstance\", \"Lproblems/Arrays/A;\", \"kotlin-exercises\"} ) public static final class Companion { @JvmStatic @NotNull public final A getInstance() { return new A(); } private Companion() { } // $FF: synthetic method public Companion(DefaultConstructorMarker $constructor_marker) { this(); } }}Please note there is an extra method getInstance in the outer class A.Now when we use it without @JvmStatic following code gets generated.public final class A { public static final A.Companion Companion = new A.Companion((DefaultConstructorMarker)null); @Metadata( mv = {1, 1, 15}, bv = {1, 0, 3}, k = 1, d1 = {\"\\u0000\\u0012\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0002\\b\\u0002\\n\\u0002\\u0018\\u0002\\n\\u0000\\b\\u0086\\u0003\\u0018\\u00002\\u00020\\u0001B\\u0007\\b\\u0002¢\\u0006\\u0002\\u0010\\u0002J\\u0006\\u0010\\u0003\\u001a\\u00020\\u0004¨\\u0006\\u0005\"}, d2 = {\"Lproblems/Arrays/A$Companion;\", \"\", \"()V\", \"getInstance\", \"Lproblems/Arrays/A;\", \"kotlin-exercises\"} ) public static final class Companion { @NotNull public final A getInstance() { return new A(); } private Companion() { } // $FF: synthetic method public Companion(DefaultConstructorMarker $constructor_marker) { this(); } }}Notice the absence of the getInstance in the outer class. In case we don’t use @JvmStatic from java getting instance of class A would be with one extra Companion as shown below. A.Companion.getInstance() Now given the limitation of only 65,536 method counts in a single dex (for android), using @JvmStatic just to reduce Companion keyword is costly affair in Android.More reading:1.@JvmStatic2.When and Why to use @JvmStatic." }, { "title": "Effectively using Lazy", "url": "/posts/by-lazy-in-Kotlin/", "categories": "Kotlin", "tags": "Kotlin", "date": "2019-06-09 17:18:23 +0000", "snippet": "Effectively using property delegation function lazy in kotlin.Using lazy in kotlinWe all know kotlin’s standard delegation function lazy which lazily initialises our object, let’s say you have cond...", "content": "Effectively using property delegation function lazy in kotlin.Using lazy in kotlinWe all know kotlin’s standard delegation function lazy which lazily initialises our object, let’s say you have condition if this object is initialised you need to either dispose the resources.Now normally we would do the following val resource&lt;T&gt; by lazy&lt;T&gt; { //lazy initialisation logic }and when we need to dispose resource we would do resource.dispose()CatchBut there is catch this would internally run the lazy initialisation logic and then dispose the resource, we are unnecessarily initialising and then disposing.Instead we can use a public method that lazy interface provides, by this we are effectively using the lazy property delegation. val resourceDelegate = lazy { /** resource initialising **/} val resource:ResourceType by resourceDelegate if(resourceDelegate.isInitialized()){ resource.dispose() }More reading:Lazy interface doc.How lazy-initialization work" }, { "title": "Singleton ReactInstance Manager", "url": "/posts/weird-codepush-problem/", "categories": "React-Native", "tags": "React-Native", "date": "2018-12-27 17:18:23 +0000", "snippet": "Weird code-push issue with associated with multiple instances of ReactInstanceManager class in Android.Recently, I was working on a project which had part of its screen’s implemented in react-nativ...", "content": "Weird code-push issue with associated with multiple instances of ReactInstanceManager class in Android.Recently, I was working on a project which had part of its screen’s implemented in react-native(other parts were native). After developing a new screen which was in react-native, we encountered a strange problem with code-push.Each time you do a code-push, it would rollback to the previous version. At first we debugged our JS code for any potential errors that would have caused this, but found none.After hours of scratching our head, we found out that ReactInstanceManager class needs to be Singleton(in android), which we missed in react-native documentation. A ReactInstanceManager can be shared by multiple activities and/or fragments. You will want to make your own ReactFragment or ReactActivity and have a singleton holder that holds a ReactInstanceManager. When you need the ReactInstanceManager (e.g., to hook up the ReactInstanceManager to the lifecycle of those Activities or Fragments).So each time you create new instance ReactInstanceManager, we create new instances of CodePush, which results in hash mismatch between hash-key obtained and folder hash(I will dig into the source code more, and update the post, stay tuned!!)." }, { "title": "Annotation Processor vs AOP.", "url": "/posts/@processor-vs-AOP/", "categories": "Programming", "tags": "Programming", "date": "2018-12-16 17:18:23 +0000", "snippet": "Blog post on when to use @processor vs aop(aspect oriented programming).Question here boils down whether you need to get rid of boiler plate code or have a responsibility(logging, method tracing) s...", "content": "Blog post on when to use @processor vs aop(aspect oriented programming).Question here boils down whether you need to get rid of boiler plate code or have a responsibility(logging, method tracing) shared across classes that you need to execute without polluting classes(I would hate it if a method has 15 lines of code out of which 10 lines are just used for logging/method tracing).@Processor:Mainly used to generate code, without modifying the existing code behaviour, this was introduced mainly to eliminate boiler plate codes. The main advantage you get here is you just have to test the generator the generated code(boiler plate) will be error free for any number of class’s you use them on, Just like @singleton in Dagger.If your keen on how to build one, then i suggest you to go through Ryan’s excellent video and then Mert Şimşek’s medium article.If your into android there are pretty famous libraries that use annotation processor, such as Butterknife, FragmentArgs and a more complicated one DaggerAOP(Aspect oriented programming):Useful technique that enables adding executable blocks to the source code without explicitly changing it.This approach useful when you have responsibility(or a concern) that has to be shared across the floor,(In case of MVP all models, views and presenters share this, for instance logging, persistence etc) such a shared concern(responsibility) we call it as cross cutting concern.such concerns should not pollute our method but instead should happen behind the scenes, we can modularise such concern(s) in a class and annotate it with Aspect, this aspect is then injected to our methods by the aspectj compiler (aka ajc ) during the compile time.How ,Where,When and What:1.How: to inject is taken care by ajc, the process is called weaving.2.Where: to inject is defined by us, it is similar to a regular expression as shown execution(@com.karthik.pretty_annotation.Pretty * *(..)) which basically states inject it any method with visibility modifier *(includes private, protected, default and public) whose arguments are * (can be anything) but annotated with @Pretty.This expression usually called as pointcut expression.3.When: to inject is defined by three sets of annotation named before ,after and around typically we use it with pointcut expression @Around(execution(@com.karthik.pretty_annotation.Pretty * *(..))) as the name suggests it can be before method is executed or after or instead of / along with method execution (around). usually called advice4.What to inject is typically a cross cutting concern, such as logging, tracing etc.as summarised in the example below. @Aspect public class MethodLogger { @Around(\"execution(@com.karthik.pretty_annotation.Pretty * *(..))\") public Object around(ProceedingJoinPoint point) { //cross cutting concern code is written here //proceed with original method execution return point.proceed() } }More resources on AOP1.Java Method Logging with AOP.2.AOP in Android" }, { "title": "ClipToPadding attribute to rescue.", "url": "/posts/clip-to-padding-for-rescue/", "categories": "Android", "tags": "Android", "date": "2018-08-23 17:18:23 +0000", "snippet": "IntroductionBy setting ClipToPadding = false , The view draws beyond its bounds into the padding area, overwrite this drawing with the parent’s padding.By default Android sets this property to true...", "content": "IntroductionBy setting ClipToPadding = false , The view draws beyond its bounds into the padding area, overwrite this drawing with the parent’s padding.By default Android sets this property to true for any ViewGroup, which means they will be clipped to adjust to the padding of the ViewGroup.Below images depicts better than any documentation.In case of RecyclerView:*image credits pulpfiction.In case of Fab button:clipToPadding = false The shadow is drawn evenly, even if it exceeds the view bounds.Whereas clipToPadding = true The shadow is clipped when it crosses the view bounds.*image credits Samuel Peter.Overall setting this property to false, in most cases leads to better UX.More Reading:1.StackOverflow answer2.Android doc" }, { "title": "Using object keyword in kotlin.", "url": "/posts/understanding-Kotlin-Object-Keyword/", "categories": "Kotlin", "tags": "Kotlin", "date": "2018-07-12 17:18:23 +0000", "snippet": "IntroductionIn this post, we’ll understand the usage of object keyword in kotlinObject key word in kotlin literally means the object of the class, now this keyword can be used in three different s...", "content": "IntroductionIn this post, we’ll understand the usage of object keyword in kotlinObject key word in kotlin literally means the object of the class, now this keyword can be used in three different scenarios.1.As a expression.2.As a declaration.3.Along with companion keyword.1. As an expression:This is exactly equivalent of creating anonymous objects in java, syntax is used as object: as shown in the below example. val listner = object:Listner(){ @Override fun onSuccess(){ } @Override fun onFailure(){ } } unlike java anonymous inner classes, can implement interfaces, and can be assigned to a variable, but one thing to note is that each time anonymous class is invoked a new object is created. As shown in the below example fun main(args: Array&lt;String&gt;) { abstract class Listner{ abstract fun success() abstract fun failure() } val list = object:Listner(),list{ override fun success(){ println(\"success\") } override fun failure(){ println(\"fail\") } override fun suc(){ println(\"suc\") } } list.suc() } interface list{ fun suc() } would print suc as its output.2. As a Declaration: object A here A is singleton in nature, which is equivalent of writing below java code. public class A{ private A a; private A(){ } public static synchronized A getInstance(){ if(a==null){ a = new A(); } return a; } } since the instance of the class is created immediately, there is no constructor allowed inside object, it can also implement and extend like any other kotlin classes.3. As a companion:equivalent to static factory methods in java, unlike static methods in java companion object can implement an interface and can have extension functions. The only difference between package level function and companion object is that, companion object can access private variables(including the private constructor) of the class containing it. If your extending a class, companion objects are not overridden. class Person{ interface transform{ fun fromJson(response:String):T } companion object:transform{ fromJson(response:String):Person{ ... } } } //can be called as Person.fromJson(response) " }, { "title": "Wealth ≠ Money", "url": "/posts/wealth-not-equal-to-money/", "categories": "Life", "tags": "Life", "date": "2018-07-06 17:18:23 +0000", "snippet": "Interesting concept about wealth and money that I read in paul graham’s book Hackers &amp; Painters.Often times we mistake wealth for money, wealth is something that people want.You make money by g...", "content": "Interesting concept about wealth and money that I read in paul graham’s book Hackers &amp; Painters.Often times we mistake wealth for money, wealth is something that people want.You make money by getting rewarded for the wealth you have created, take an example of Jan koum and Brian Acton, a few years back they had created whatsApp and fast forward their wealth was rewarded $16 billion dollars.So how do we differentiate between a side project and a wealth?well, your users are the proof for the wealth, you have created.So the main take away is that you get rich by creating wealth, and you create wealth by building something people want." }, { "title": "More than writing code", "url": "/posts/effective-programing/", "categories": "Programming", "tags": "Programming", "date": "2016-11-19 17:18:23 +0000", "snippet": "Key takeaways from the book Effective programing: more than writing code by Jeff Atwood.A. 8 levels of programmers.:I won’t be going in detail, jeff’s blog post explains it better, programmer who c...", "content": "Key takeaways from the book Effective programing: more than writing code by Jeff Atwood.A. 8 levels of programmers.:I won’t be going in detail, jeff’s blog post explains it better, programmer who creates business around their code and have a freedom to decide for themseleves what platform, language and problem they would like to work on, these are the one’s who make the difference and are often rewarded(make money) from their product.As Joel Spolsky quotes The difference between an average and great programmer is not how many programming languages one knows, but by letting fellow programmers use the code instead rewriting it, absent which their code is worth nothing.B. Go fast that way really fast, if something comes on your way turn..:The main highlight of this chapter is that speed of iteration always beats quality of iteration, he demonstrates by taking classic example of internet explorer and google chrome browsers.As Tim O'Reilly tweets There are good fast decisions but no good slow decisions.C. Good programming principles:Programming 101: it’s always your fault, in other words fix yourself before telling world is broken.Never code by accident:never code blindfolded, such as working on technology you aren’t familar with, buildng applications you don’t fully understand.Best code: best code is no code at all, code requires reason to exist.Read source luke: documentation may rot, but the source code is the ultimate truth so read the code luke!Rubber duck debug: you ask the thorough detailed question to this imaginary person/inanimate object, most of the time answers hit’s us when we are midway through asking questions.Performance is a feature: make your application performance a point of pride. Most software developers think that their job is to write code unfortunatly it’s not, their job is to solve customer problem.D. Pair programming vs Code review:The advantage of pair programming is it’s gripping immediacy, it is impossible to ignore the reviewer when he/she is sitting right next to you. wheareas on the other hand code review nobody wants to spend time reviewing others new code, but in the end either ways if your code is looked by more than one pair if eyes it will produce a better software. All too often software developers are merely tourists in their own codebase.E. UI first software development:Start with UI development,before you start writing all the business logic for the application.F. Unit testing:Any test is better than no test, but the ultimate unit testing is if the user can get his workdone using your application, if the user can’t figure out how to use your application then that is ultimate unit test fail." }, { "title": "Custom Loading Animation", "url": "/posts/custom-Loading-Anim/", "categories": "Android", "tags": "Android", "date": "2016-05-06 17:18:23 +0000", "snippet": "Improve user experience by adding your own custom loading animation, this blog post talks about creating a simple loading animation.##IntroductionProgress bars let the user know that the device is ...", "content": "Improve user experience by adding your own custom loading animation, this blog post talks about creating a simple loading animation.##IntroductionProgress bars let the user know that the device is busy, and in particular the indeterminate mode the progress bar shows a cyclic or a horizontal animation without an indication of progress.we can always improve this experience by adding our own custom loading screen, to see how this works lets take example of this sample application(Let’s call it taxi sure, which helps you rent taxi) that has a simple splash screen activity.first let’s see how the application splash screens looks with the oridnary dull indeterminate progress(circular).Now let’s try some custom indeterminate progress view, let’s assume app is about renting cars.Hence i will use car icons for loading icons.##Implementation part:Create a class called CarLoadingView which extends Linear Layout, now define two constructors one is to create view through xml and the latter one is programmatically in java. public CarLoadingView(Context context, AttributeSet attrs)and public CarLoadingView(Context context)now let’s consider the first constructor, which gets called during xml inflation.please note that first,second,third and fourth are all global imageview variables. LayoutInflater inflater = LayoutInflater.from(context); inflater.inflate(R.layout.car_loading_row,this); first = (ImageView) findViewById(R.id.img_1); second = (ImageView)findViewById(R.id.img_2); third = (ImageView)findViewById(R.id.img_3); fourth = (ImageView)findViewById(R.id.img_4); handler = new Handler(); positionswitcher.run();One thing to note is that the constructor inflates a xml layout called car_loading_row.Now this xml consists of a Linear Layout with orientation set horizontally and 4 Imageviews as childviews. &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"horizontal\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:gravity=\"center\"&gt; &lt;ImageView android:id=\"@+id/img_1\" android:layout_width=\"54dp\" android:layout_height=\"54dp\" android:layout_margin=\"8dp\" /&gt; &lt;ImageView android:id=\"@+id/img_2\" android:layout_width=\"54dp\" android:layout_height=\"54dp\" android:layout_margin=\"8dp\" /&gt; &lt;ImageView android:id=\"@+id/img_3\" android:layout_width=\"54dp\" android:layout_height=\"54dp\" android:layout_margin=\"8dp\" /&gt; &lt;ImageView android:id=\"@+id/img_4\" android:layout_width=\"54dp\" android:layout_height=\"54dp\" android:layout_margin=\"8dp\" /&gt; &lt;/LinearLayout&gt;we also instantiate a handler and define a runnable as shown in the constructor, at first we manually call run() method of the runnable positionswitcher, later on we use handler to do the job for every 250ms.By default all the imageviews are set with darker background images.If you haven’t noticed there are 2 images with color code #cbcbcb and #fff, were #fff is highlighted image.The logic here is we increment a int variable called position in the runnable and call a method called switch position were we set image view with the corresponding images.We do modulo of the position passed so that we can limit it upto 3(0-3) positions only. Runnable positionswitcher = new Runnable() { @Override public void run() { switchPosition(position); position++; //re run the same thread after the duration of 250 ms handler.postDelayed(positionswitcher,250); } }; private void switchPosition(int position){ int highlightedPosition = position % 4; first.setImageResource(R.mipmap.dark_city_car); second.setImageResource(R.mipmap.dark_sedan); third.setImageResource(R.mipmap.dark_suv); fourth.setImageResource(R.mipmap.dark_sportcar); switch (highlightedPosition){ case 0: first.setImageResource(R.mipmap.city_car); break; case 1: second.setImageResource(R.mipmap.sedan); break; case 2: third.setImageResource(R.mipmap.suv); break; case 3: fourth.setImageResource(R.mipmap.sportcar); break; } }Please note that inside runnable i use the handler object that was instantiated earlier in the constructor.and last but not the least don’t forget to add custom view in the activity layout file. &lt;com.karthik.customloadingapp.CarLoadingView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_alignParentBottom=\"true\" android:layout_marginBottom=\"32dp\" android:layout_centerHorizontal=\"true\"/&gt; More Reading:you can find the source code here." }, { "title": "Using static code analysis tools", "url": "/posts/using-static-code-analysis-tools/", "categories": "Android", "tags": "Android", "date": "2016-02-28 17:18:23 +0000", "snippet": "This blog post talks about using Infer and Lint code analysis tools in android applications,to avoid potential pitfals.Facebook InferFacebook Infer for android reports potential null pointer excep...", "content": "This blog post talks about using Infer and Lint code analysis tools in android applications,to avoid potential pitfals.Facebook InferFacebook Infer for android reports potential null pointer exceptions and resource leaks in Android and Java code.Checkout the get started page to setup infer environment. Please make sure you have installed all the dependencies required ./build-infer.sh script should return with no issues found therefore compiling the infer.Once the infer is compiled and ready, download the gradle wrapper by running ./gradlew clean , now use infer --- ./gradlew build.But i personally make use of infer ----debug ---- ./gradlew build that outputs the additional debug informations such as possible Class Cast Exception etc and generates html pages for each file about analysis done.Also in the build.gradle add lintOptions so that it will stop gradle build in case of any errors found.android {\tlintOptions{\t\tabortOnError false\t}}Protipnote that if your running infer multiple times use infer -- incremental ./gradlew build.TroubleShootingIf you get error saying infer command not found re-compile the infer using ./build-infer.sh and then try again.In case the error still persists then infer is not compiled properly, this might be due to the reason that all dependencies are not installed in your computer.After a successful Infer run,infer-out a directory is created to store the results of the analysis.Structure of infer-out:1.Procs.csv and stats.json: contain debug information about the run.2.Bugs.txt, report.csv, and report.json: contain the Infer reports in three different formats.3.The log/, multicore/, and sources/ folders: are used internally to drive the analyzer.4.Captured: contains information for each file analyzed by Infer(also see the html pages with detailed analysis if infer is used with debug option).Checkout my sample app that has infer-out folder along with the html pages with detailed analysis inside captured folder.Android LintThis tool checks your Android project source files for potential bugs and optimization improvements for correctness.This is inbuilt tool in Android Studio, and it automatically runs once you compile the code,you can also run it manually by right clicking in the IDE Analyze &gt; Inspect Code, moreover you can also analyze dependencies, cyclic dependencies etc.You can also invoke this through command line.$ ./gradlew lint (in linux and osx).And the Lint results will be a html page in the mobile/build/outputs/lint-results.html.i personally feel lint in a way is more advanced and consider’s more paramters into the account while dumping the results in the lint-results.html.The optimization tips in the lint-results.html will take all the paramters(such as Security,Performance,Overdraw,Unused resources etc) into the consideration.More Reading:1.For more details about the Lint visit the developer website.2.You can also build Custom Lint checks if you think that built-in Lint checks are not enough,get started by visiting this blog post." }, { "title": "Debugging with Stetho", "url": "/posts/using-stetho/", "categories": "Android", "tags": "Android", "date": "2016-02-26 17:18:23 +0000", "snippet": "Stetho is facebook open sourced debug tool that brings in chrome developer features natively for android applications with the help of okhttp interceptors.Getting startedTo get started add dependen...", "content": "Stetho is facebook open sourced debug tool that brings in chrome developer features natively for android applications with the help of okhttp interceptors.Getting startedTo get started add dependency in your gradle file and intialize stetho in the onCreate method of your application class.Adding dependency: compile 'com.facebook.stetho:stetho-urlconnection:1.3.1' Code changes: Stetho.initialize(Stetho.newInitializerBuilder(mContext) .enableDumpapp(Stetho.defaultDumperPluginsProvider(mContext)) .enableWebKitInspector(Stetho.defaultInspectorModulesProvider(mContext)) .build()); OkHttpClient client = new OkHttpClient.Builder() .addNetworkInterceptor(new StethoInterceptor()) .build();Side notes:(i)If you have never used okHttpClient,enqueue callback returns the response in background thread, make sure you communicate to the main thread,i have used handler for the purpose.(ii)If you are using Picasso to display the images in your application make sure you use the same okhttp instance that has StethoInterceptor configured in it.personally i would recommend using Singleton pattern to get instance of okhttp.\tpicasso = new Picasso.Builder(mContext) .downloader(new OkHttp3Downloader(okHttpClient)) .build();make a note that i have used OkHttp3Downloader.(iii)Do not configure okhttp in the following way\tOkHttpClient client = new OkHttpClient();\tclient.networkInterceptors().add(new StethoInterceptor()) in okhttp3 the networkInterceptors list is made unmodifiableList.hence will throw unsupported Operation Exception.The video gives the quickoverview on how stetho helps in monitoring network calls, and inspecting elements in the screens.NotesYou can additionally view the shared preferences value and the database values using the stetho which i have not included in the video. In the sample application i have created two dummy methods.fillDummyValuesInSharedPreferences and fillDummyValuesInDB which fills value in SharedPreferences. Realm db contents will not be shown,while shared preferences will be shown under local storage option, and also note that stetho also provides custom dumpapp plugins, which i have not covered in this blog post.More Reading:1.Also there is awesome screencast by Donn felker called caster.io.2.Do checkout the sample code in the stetho repo." }, { "title": "FAB to dialog transistion and vice versa.", "url": "/posts/fab-to-dialog-transistion-and-vice-versa/", "categories": "Android", "tags": "Android", "date": "2016-01-18 17:18:23 +0000", "snippet": "In this blog post i am gonna show you how to implement smooth transition between dialog and a fab,similar to Nick Butcher’s famous Plaid app.Fab to dialog transition is achieved by having transiti...", "content": "In this blog post i am gonna show you how to implement smooth transition between dialog and a fab,similar to Nick Butcher’s famous Plaid app.Fab to dialog transition is achieved by having transition between two activities. Transistion as per the doc the definition goes like thisDefinition Activity transitions in material design apps provide visual connections between different states through motion and transformations between common elements.Types of transitonsAccording to the developer website shared transistion animation decides on how the views are shared during transistion. Android defines 4 types of transitions 1.changeBounds : change the layout border target view. 2.changeClipBounds : border cropped target view. 3.changeTransform : change the zoom target view scale, and rotation angle. 4.changeImageTransform: change target picture size and scaling.shared elements should have one additional attribute android:transitionName = \"\" so before we dive into animation,let’s have a brief introduction to the classes used in the animation.Classes used in Animation1.MorphFabToDialog.java: A custom transition that morphs a circle into a rectangle, changing it’s background color and extends changeBounds transition.while defining custom transitons there are three methods we need to override capture starting values,capturing end values and createAnimator.super.captureStartValues(transitionValues) &amp;&amp; super.captureEndValues(transitionValues) the framework calls this method for every view in the starting scene and ending scene respectively, after this we should be adding custom values to transistionValues.We can get reference of the view that is transistioning using transitionValues.view and also it contains Map instance in which you can store the view values(as said before) you want, in this example rectMorph:color and rectMorph:cornerRadius are the two map keys for which we enter values as accent color and 4dp respectively.And the third method that is createAnimator return animator for animating between captureStartValues and captureEndValues. Since we animate both color and corner radius we will be returning animator set(which is derived from animator),also we ease in childview of the view being animated.Side note:Here the animatorset uses playTogether method so that animations are performed simultanously.For more info about the custom transistions visit the official developer site.2.MorphDialogToFab.java:A custom transition that morphs a rectangle into a circle and functionality is exactly oposite of the above explained transition.3.MorphDrawable.java:In both the transitions we use a custom drawables called MorphDrawable whose functionality is to morph size, shape (via it’s corner radius) and color given them as a paramters.This class extends Drawable, basically set the corner alpha and the color in the canvas and draws them during animation.For more about drawable check the official developer site.Having described the classes,this is how we start an activity passing shared view,and transistion name along with current activity to makeSceneTransitionAnimation method of ActivityOptions.Calling ActivityIntent intent = new Intent(MainActivity.this, DialogActivity.class);ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(MainActivity.this, fab, getString(R.string.fabtransition));startActivity(intent ,options.toBundle());Receiving ActivityAnd in the reciving activity, in the on create method,we set the motion path along with the horizontal and vertical angle’s. ArcMotion arcMotion = new ArcMotion(); arcMotion.setMinimumHorizontalAngle(50f); arcMotion.setMinimumVerticalAngle(50f);Creating instances of MorphFabToDialog and MorphDialogToFab set motion path as arc motion.setSharedElementEnterTransition() and setSharedElementReturnTransition() for the getWindow() object of the Activity. MorphFabToDialog sharedEnter = new MorphFabToDialog(); sharedEnter.setPathMotion(arcMotion); sharedEnter.setInterpolator(easeInOut); MorphDialogToFab sharedReturn = new MorphDialogToFab(); sharedReturn.setPathMotion(arcMotion); sharedReturn.setInterpolator(easeInOut); Window window = getWindow(); window.setSharedElementEnterTransition(sharedEnter); window.setSharedElementReturnTransition(sharedReturn); And then we create interpolator for both shared enter transistion and exit transistion. Interpolator easeInOut = AnimationUtils.loadInterpolator(this, android.R.interpolator.fast_out_slow_in); And the best part of the trick is we have added custom theme for the activity to appear as a dialog.&lt;style name=\"AppTheme.Dialog\" parent=\"AppTheme.NoActionBar\"&gt; &lt;item name=\"android:windowIsTranslucent\"&gt;true&lt;/item&gt; &lt;item name=\"android:windowBackground\"&gt;@color/dialog_background_scrim&lt;/item&gt; &lt;/style&gt;&lt;style name=\"AppTheme.NoActionBar\"&gt; &lt;item name=\"windowActionBar\"&gt;false&lt;/item&gt; &lt;item name=\"windowNoTitle\"&gt;true&lt;/item&gt;&lt;/style&gt;which ofcourse extends AppTheme.NoActionBar dialog_background_scrim color code is #99323232.More Reading:1.To find out more in detail check this blog post. 2.And the source code is available here." }, { "title": "Curved animation of FAB", "url": "/posts/curved-animation-of-FAB/", "categories": "Android", "tags": "Android", "date": "2016-01-17 17:18:23 +0000", "snippet": "This blog post demonstrates on how to implement curved FAB motion and add circular reveal animation to it.AnimationsWe will split the animation into arc motion animation and circular reveal animati...", "content": "This blog post demonstrates on how to implement curved FAB motion and add circular reveal animation to it.AnimationsWe will split the animation into arc motion animation and circular reveal animation, the arc motion animation is achived based on the concept of bezire curve.There is also an awesome sample repo by saulmm that demonstrates curved motion of fab.Part 1ClassesI will give you an overview of few classes that i used from the repo.1.PathPoint.java:A class that holds information about a location and how the path should get to that location from the previous path location (if any).Any PathPoint holds the information for its location as well as the instructions on how to traverse the preceding interval from the previous location.2.AnimatorPath.java:Class that contains the list of pathpoint objects for a given curve,also specifies type motion either discontinous move to ,straight path or curve to motions of the fab to the given point.3.PathEvaluator.java:This evaluator interpolates between two PathPoint values given the value t, the proportion traveled between those points.The value of the interpolation depends on the operation specified by the endValue (the operation for the interval between PathPoints is always specified by the end point of that interval).basically responsible for calculating the cureved bezire path points.The android co-ordinate system is such that 0,0 is on the top left corner.(0,MaxY) is bottom left and (maxx,maxy) bottom right and right top is (Maxx,0).therefore points for the exponential curve are as follows (-200, -50, -230, -450, -255, -500).Code \tAnimatorPath path = new AnimatorPath(); \tpath.moveTo(0, 0); \tpath.curveTo(-200, -50, -230, -450, -255, -500); \tfinal ObjectAnimator anim = ObjectAnimator.ofObject(this, \"fabLoc\",new PathEvaluator(), path.getPoints().toArray()); \tanim.setInterpolator(new AccelerateDecelerateInterpolator()); \tanim.setDuration(300); \tanim.start();Now as the animator produces the new path points we need setter method that set’s fab location.so define this method in your fragment.This setter will be called by the ObjectAnimator given the fabLoc property string as we did above.public void setFabLoc(PathPoint newLoc) { \tmFab.setTranslationX(newLoc.mX); //flag describing whether layout is revealed or not if (mRevealFlag) mFab.setTranslationY(newLoc.mY - (mFabSize / 2)); else mFab.setTranslationY(newLoc.mY); }Part 2Now the second part reveal animations you have to wait until the curved animation to end. Then call reveal animation, we can add listner which gives arc motion animation end callback. on end method of animation listner create circular reveal animations using the ViewAnimationUtilsNote: please note that ViewAnimationUtils available only for android 5.0 and above ViewAnimationUtils.createCircularReveal(revealLayout,cx,cy,0,finalRadius); Now here the tricky part would be to reverse animate along the path(same points in the reverse order doesnt work, also i was lazy to calculate the points like how we did it to move upwards)instead extend interpolator and override the method as follows.@Override public float getInterpolation(float paramFloat) { return Math.abs(paramFloat -1f); }Note:this kind of fab animation will be useful when you want to animate the fab in the fragment or maybe inside one single activity without transitions.In case of the activity transition animation please follow my next blog post where we can achive it using transitions by moving from one activity to another.More Reading:1.Find out more in detail by visiting the project on GitHub.2.Do check this old but awesome blog post about curve motion by Chet Haase." } ]
